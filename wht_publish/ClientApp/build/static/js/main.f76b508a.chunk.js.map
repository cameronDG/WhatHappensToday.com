{"version":3,"sources":["services/serviceHelper.js","services/whtRecapService.js","components/WhtRecaps.jsx","components/GetDate.jsx","components/Nothing.jsx","components/SiteNav.jsx","services/doolRecapService.js","components/DoolRecap.jsx","components/AlreadyKnowV2.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["onGlobalSuccess","response","data","onGlobalError","err","Promise","reject","endpoint","API_HOST_PREFIX","createRecap","recap","config","method","url","withCredentials","crossdomain","headers","axios","then","catch","WhtRecaps","props","useState","whtRecaps","setWhtRecaps","onGetRecapsByDateSuccess","items","map","index","className","overview","onGetRecapsByDateError","error","console","log","useEffect","date","whtRecapService","GetDate","Date","getDate","month","getMonth","getFullYear","Nothing","navigate","useNavigate","onCreateRecapSuccess","onCreateRecapError","onNothingClick","newRecap","onClick","SiteNav","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","style","color","isActive","to","doolRecapEndpoint","doolApiKey","DoolRecap","setRecap","onGetRecapSuccess","last_episode_to_air","air_date","next_episode_to_air","onGetRecapError","doolRecapService","recapValidationSchema","Yup","shape","min","max","required","AlreadyKnowV2","modal","setModal","toggleModal","getRandomIntInclusive","Math","ceil","floor","random","epInt","episodes","length","getRandomRecap","seasonInt","enableReinitialize","initialValues","onSubmit","values","validationSchema","handleChange","touched","errors","TextField","fullWidth","multiline","name","value","onChange","variant","placeholder","Boolean","helperText","centered","isOpen","toggle","maxWidth","App","role","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","_logger","debug","extend","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f76b508a.chunk.js","sourcesContent":["//import axios from \"axios\";\r\n// axios.defaults.withCredentials = true;\r\n// // Add a request interceptor\r\n// axios.interceptors.request.use(function (config) {\r\n//   config.withCredentials = true;\r\n//   return config;\r\n// });\r\n\r\n/**\r\n * Will unpack the response body from reponse object\r\n * @param {*} response\r\n *\r\n */\r\nconst onGlobalSuccess = (response) => {\r\n  /// Should not use if you need access to anything other than the data\r\n  return response.data;\r\n};\r\n\r\nconst onGlobalError = (err) => {\r\n  return Promise.reject(err);\r\n};\r\n\r\nconst API_HOST_PREFIX = \"https://localhost:5001\";\r\nconst API_NODE_HOST_PREFIX = \"\";\r\n\r\n//console.log(\"API_HOST_PREFIX\", API_HOST_PREFIX);\r\n\r\nexport {\r\n  onGlobalError,\r\n  onGlobalSuccess,\r\n  API_HOST_PREFIX,\r\n  API_NODE_HOST_PREFIX,\r\n};\r\n","import axios from \"axios\";\r\nimport {\r\n  onGlobalError,\r\n  onGlobalSuccess,\r\n  API_HOST_PREFIX,\r\n} from \"./serviceHelper\";\r\n\r\nconst endpoint = API_HOST_PREFIX + \"/api/recaps\";\r\n\r\nconst createRecap = (recap) => {\r\n  const config = {\r\n    method: \"POST\",\r\n    url: endpoint,\r\n    data: recap,\r\n    withCredentials: true,\r\n    crossdomain: true,\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  return axios(config).then(onGlobalSuccess).catch(onGlobalError);\r\n};\r\n\r\nconst getRecapsByDate = (date) => {\r\n  const config = {\r\n    method: \"GET\",\r\n    url: `${endpoint}?date=${date}`,\r\n    withCredentials: true,\r\n    crossdomain: true,\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  return axios(config).then(onGlobalSuccess).catch(onGlobalError);\r\n};\r\n\r\nexport { createRecap, getRecapsByDate };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport * as whtRecapService from \"../services/whtRecapService\";\r\n\r\nconst WhtRecaps = (props) => {\r\n  const [whtRecaps, setWhtRecaps] = useState(\"\");\r\n\r\n  const onGetRecapsByDateSuccess = (response) => {\r\n    setWhtRecaps(\r\n      response.items.map((recap, index) => {\r\n        return (\r\n          <div key={index} className=\"row justify-content-center\">\r\n            <div className=\"col-lg-8 col-md-10 col-sm-12\">\r\n              <p className=\"ps-4 pb-3\">{recap.overview}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  const onGetRecapsByDateError = (error) => {\r\n    console.log(error);\r\n  };\r\n\r\n  useEffect(() => {\r\n    whtRecapService\r\n      .getRecapsByDate(props.date)\r\n      .then(onGetRecapsByDateSuccess)\r\n      .catch(onGetRecapsByDateError);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container pt-4\">\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-lg-8 col-md-10 col-sm-12\">\r\n            <p className=\"mx-2 ps-1\">{props.date}:</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"container-fluid ps-4 pe-4 pb-4 pt-2\">{whtRecaps}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WhtRecaps;\r\n","const GetDate = () => {\r\n  let date = new Date().getDate();\r\n  let month = new Date().getMonth() + 1;\r\n  let year = new Date().getFullYear();\r\n\r\n  if (month < 10) {\r\n    month = \"0\" + month;\r\n  }\r\n\r\n  if (date < 10) {\r\n    date = \"0\" + date;\r\n  }\r\n\r\n  return year + \"-\" + month + \"-\" + date;\r\n};\r\n\r\nexport default GetDate;\r\n","import { useNavigate } from \"react-router-dom\";\r\nimport * as whtRecapService from \"../services/whtRecapService\";\r\nimport GetDate from \"./GetDate\";\r\n\r\nconst Nothing = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const onCreateRecapSuccess = () => {\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const onCreateRecapError = (error) => {\r\n    console.log(error);\r\n  };\r\n\r\n  const onNothingClick = () => {\r\n    const newRecap = {\r\n      date: GetDate(),\r\n      overview: \"Nothing happens.\",\r\n    };\r\n\r\n    whtRecapService\r\n      .createRecap(newRecap)\r\n      .then(onCreateRecapSuccess)\r\n      .catch(onCreateRecapError);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid p-4\">\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-lg-8 col-md-10 col-sm-12\">\r\n          <p className=\"ps-4\">\r\n            Is it currently the weekend or a holiday? Are the stupid Olympics\r\n            underway again? Whatever the case, there are many reasons why\r\n            nothing could happen.\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"text-center pt-2\">\r\n        <p>Could nothing happen today?</p>\r\n        <button className=\"link-button\" onClick={onNothingClick}>\r\n          Yes\r\n        </button>\r\n        <button className=\"link-button ms-3\" onClick={onNothingClick}>\r\n          No\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nothing;\r\n","import { NavLink, useNavigate } from \"react-router-dom\";\r\n\r\nconst SiteNav = () => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <nav className=\"navbar navbar-expand-xlg\">\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#wht-nav\"\r\n          aria-controls=\"wht-nav\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"bi bi-calendar4-event\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"wht-nav\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <NavLink\r\n                className=\"nav-link mx-2 link-button ps-2\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#wht-nav\"\r\n                aria-current=\"page\"\r\n                style={({ isActive }) => {\r\n                  return {\r\n                    color: isActive ? \"black\" : \"grey\",\r\n                  };\r\n                }}\r\n                to={`/`}\r\n                onClick={() => navigate(\"/\")}\r\n              >\r\n                What happens today\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink\r\n                className=\"nav-link mx-2 link-button ps-2\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#wht-nav\"\r\n                style={({ isActive }) => {\r\n                  return {\r\n                    color: isActive ? \"black\" : \"grey\",\r\n                  };\r\n                }}\r\n                to={`/nothing`}\r\n                onClick={() => navigate(\"/nothing\")}\r\n              >\r\n                What if nothing happens today\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink\r\n                className=\"nav-link mx-2 link-button ps-2\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#wht-nav\"\r\n                style={({ isActive }) => {\r\n                  return {\r\n                    color: isActive ? \"black\" : \"grey\",\r\n                  };\r\n                }}\r\n                to={`/alreadyknow`}\r\n                onClick={() => navigate(\"/alreadyknow\")}\r\n              >\r\n                I already know what happens today\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink\r\n                className=\"nav-link mx-2 link-button ps-2\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#wht-nav\"\r\n                style={({ isActive }) => {\r\n                  return {\r\n                    color: isActive ? \"black\" : \"grey\",\r\n                  };\r\n                }}\r\n                to={`/secondopinion`}\r\n                onClick={() => navigate(\"/secondopinion\")}\r\n              >\r\n                A second opinion (i.e., what happens today)\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SiteNav;\r\n","import axios from \"axios\";\r\nimport { onGlobalError, onGlobalSuccess } from \"./serviceHelper\";\r\n\r\nconst doolRecapEndpoint = \"https://api.themoviedb.org/3/tv/881\";\r\nconst doolApiKey = \"?api_key=326121d896f20a68d932d2ef07fd1917\";\r\n\r\nconst getToday = () => {\r\n  const config = {\r\n    method: \"GET\",\r\n    url: doolRecapEndpoint + doolApiKey,\r\n    withCredentials: false,\r\n    crossdomain: true,\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  return axios(config).then(onGlobalSuccess).catch(onGlobalError);\r\n};\r\n\r\nconst getRandom = (seasonInt) => {\r\n  const config = {\r\n    method: \"GET\",\r\n    url: `${doolRecapEndpoint}/season/${seasonInt}${doolApiKey}`,\r\n    withCredentials: false,\r\n    crossdomain: true,\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  };\r\n\r\n  return axios(config).then(onGlobalSuccess).catch(onGlobalError);\r\n};\r\n\r\nexport { getToday, getRandom };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport * as doolRecapService from \"../services/doolRecapService\";\r\n\r\nconst DoolRecap = (props) => {\r\n  const [recap, setRecap] = useState(\"\");\r\n\r\n  const onGetRecapSuccess = (response) => {\r\n    //console.log(response);\r\n    if (props.date === response.last_episode_to_air.air_date) {\r\n      setRecap(response.last_episode_to_air.overview);\r\n    } else if (props.date === response.next_episode_to_air.air_date) {\r\n      setRecap(response.next_episode_to_air.overview);\r\n    } else {\r\n      setRecap(\"Nothing happens.\");\r\n    }\r\n  };\r\n\r\n  const onGetRecapError = (error) => {\r\n    console.log(error);\r\n  };\r\n\r\n  useEffect(() => {\r\n    doolRecapService.getToday().then(onGetRecapSuccess).catch(onGetRecapError);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container-fluid p-4\">\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-lg-8 col-md-10 col-sm-12\">\r\n          <p className=\"ps-4\">{recap}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoolRecap;\r\n","import { TextField } from \"@material-ui/core\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as doolRecapService from \"../services/doolRecapService\";\r\nimport * as whtRecapService from \"../services/whtRecapService\";\r\nimport * as Yup from \"yup\";\r\nimport { Modal, ModalHeader, ModalBody } from \"reactstrap\";\r\n\r\nconst recapValidationSchema = Yup.object().shape({\r\n  overview: Yup.string()\r\n    .min(16, \"Too short\")\r\n    .max(280, \"Too long\")\r\n    .required(\"Need help getting started? Click below.\"),\r\n});\r\n\r\nconst AlreadyKnowV2 = (props) => {\r\n  const [recap, setRecap] = useState({ overview: \"\" });\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggleModal = () => setModal(!modal);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const getRandomIntInclusive = (min, max) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const onGetRecapSuccess = (response) => {\r\n    let epInt = getRandomIntInclusive(0, response.episodes.length - 1);\r\n\r\n    if (!response.episodes[epInt].overview) {\r\n      //console.log(\"no overview\");\r\n      getRandomRecap();\r\n    } else {\r\n      //console.log(seasonInt, \"season\");\r\n      //console.log(epInt, \"episode\");\r\n      setRecap({ overview: response.episodes[epInt].overview });\r\n    }\r\n  };\r\n\r\n  const onGetRecapError = (error) => {\r\n    console.log(error);\r\n  };\r\n\r\n  const getRandomRecap = () => {\r\n    let seasonInt = getRandomIntInclusive(51, 57);\r\n\r\n    doolRecapService\r\n      .getRandom(seasonInt)\r\n      .then(onGetRecapSuccess)\r\n      .catch(onGetRecapError);\r\n  };\r\n\r\n  const onCreateRecapSuccess = () => {\r\n    //console.log(response);\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const onCreateRecapError = (error) => {\r\n    console.log(error);\r\n  };\r\n\r\n  const addRecap = (values) => {\r\n    const newRecap = {\r\n      date: props.date,\r\n      overview: values.overview,\r\n    };\r\n\r\n    whtRecapService\r\n      .createRecap(newRecap)\r\n      .then(onCreateRecapSuccess)\r\n      .catch(onCreateRecapError);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid p-4\">\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-lg-8 col-md-10 col-sm-12\">\r\n          <Formik\r\n            enableReinitialize={true}\r\n            initialValues={recap}\r\n            onSubmit={addRecap}\r\n            validationSchema={recapValidationSchema}\r\n          >\r\n            {({ values, handleChange, touched, errors }) => (\r\n              <Form>\r\n                <TextField\r\n                  fullWidth\r\n                  multiline\r\n                  name=\"overview\"\r\n                  value={values.overview}\r\n                  onChange={handleChange}\r\n                  variant=\"standard\"\r\n                  placeholder=\"Type your recap here.\"\r\n                  className=\"ps-4\"\r\n                  error={touched.overview && Boolean(errors.overview)}\r\n                  helperText={touched.overview && errors.overview}\r\n                ></TextField>\r\n                <div className=\"pt-4 text-center\">\r\n                  <button className=\"link-button\" type=\"submit\">\r\n                    Submit\r\n                  </button>\r\n\r\n                  <button\r\n                    className=\"link-button ms-4\"\r\n                    type=\"button\"\r\n                    onClick={() => getRandomRecap()}\r\n                  >\r\n                    Help\r\n                  </button>\r\n\r\n                  <button\r\n                    className=\"link-button ms-4\"\r\n                    type=\"button\"\r\n                    onClick={() => setRecap({ overview: \"\" })}\r\n                  >\r\n                    Clear\r\n                  </button>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n          <div className=\"pt-3 text-center\">\r\n            <button\r\n              className=\"link-button button-sm\"\r\n              type=\"button\"\r\n              onClick={toggleModal}\r\n            >\r\n              Style Guide\r\n            </button>\r\n          </div>\r\n\r\n          <Modal\r\n            centered={false}\r\n            isOpen={modal}\r\n            toggle={toggleModal}\r\n            style={{ maxWidth: \"450px\" }}\r\n          >\r\n            <ModalHeader toggle={toggleModal}>Recap Style Guide</ModalHeader>\r\n            <ModalBody>\r\n              <ul>\r\n                <li className=\"pt-1\">\r\n                  What Happens Today <em>happens</em> in the <em>present</em>:\r\n                  <ul>\r\n                    <li>\r\n                      \"Marlena{\" \"}\r\n                      <u>\r\n                        <em>is</em>\r\n                      </u>{\" \"}\r\n                      visited by a mysterious hiker...\"\r\n                    </li>\r\n                    <li>\r\n                      \"Nicole{\" \"}\r\n                      <u>\r\n                        <em>exposes</em>\r\n                      </u>{\" \"}\r\n                      Sami's lurid machinations...\"\r\n                    </li>\r\n                  </ul>\r\n                </li>\r\n                <li className=\"pt-3\">\r\n                  Keep it short, sweet, and appropriate for broadcast.\r\n                </li>\r\n              </ul>\r\n            </ModalBody>\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlreadyKnowV2;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport WhtRecaps from \"./components/WhtRecaps\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport Nothing from \"./components/Nothing\";\r\nimport SiteNav from \"./components/SiteNav\";\r\n//import AlreadyKnow from \"./components/AlreadyKnow\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport DoolRecap from \"./components/DoolRecap\";\r\nimport GetDate from \"./components/GetDate\";\r\nimport AlreadyKnowV2 from \"./components/AlreadyKnowV2\";\r\n\r\nconst App = () => {\r\n  const date = GetDate();\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"p-2\">\r\n        <SiteNav />\r\n      </header>\r\n\r\n      <main role=\"main\">\r\n        <div className=\"container\">\r\n          <Routes>\r\n            <Route path=\"/\" element={<WhtRecaps date={date} />} />\r\n            <Route path=\"/nothing\" element={<Nothing />} />\r\n            <Route\r\n              path=\"/alreadyknow\"\r\n              element={<AlreadyKnowV2 date={date} />}\r\n            />\r\n            <Route path=\"/secondopinion\" element={<DoolRecap date={date} />} />\r\n          </Routes>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./services/serviceHelper\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap\";\nimport \"toastr/build/toastr.min.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport debug from \"sabio-debug\";\nconst _logger = debug.extend(\"root\");\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals(_logger);\n"],"sourceRoot":""}